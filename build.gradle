import org.springframework.boot.gradle.plugin.SpringBootPlugin

// 전체 프로젝트 빌드 설정
buildscript {
    ext {
        // 프로젝트 및 Spring Boot 버전 설정
        set("projectVersion", "0.0.1-SNAPSHOT")
        set("springBootVersion", "3.3.2")
        set("springDependencyManagementVersion", "1.1.6") // 변수명 변경

        // 프론트엔드 디렉토리 경로 설정
        set("frontendDir", "$projectDir/frontend")
    }

    // Gradle 플러그인 저장소 설정
    repositories {
        mavenCentral() // Maven Central 저장소 추가
        maven { url "https://plugins.gradle.org/m2/" } // Gradle 플러그인 저장소 추가
    }
}

// 하위 프로젝트 플러그인 설정
plugins {
    // Java 프로젝트 플러그인 적용
    id 'java'

    // Spring Boot 플러그인 적용 (버전 변수 사용)
    id 'org.springframework.boot' version "${springBootVersion}" apply false

    // Spring Boot 의존성 관리 플러그인 적용 (버전 변수 사용)
    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
}

// 프로젝트 기본 정보 설정
group = 'kr.bit'
version = projectVersion

// Java 버전 설정 (JDK 17)
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

// 컴파일 및 어노테이션 프로세서 설정
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

// 의존성 저장소 설정 (Maven Central)
repositories {
    mavenCentral()
}

// Spring Boot 의존성 관리 (루트 프로젝트에서 관리)
dependencyManagement {
    imports {
        mavenBom SpringBootPlugin.BOM_COORDINATES
    }
}

// 모든 하위 프로젝트에 공통으로 적용될 플러그인
subprojects {
    apply plugin: 'java'
    repositories {
        mavenCentral()
    }
}

// 프론트엔드 빌드 작업 정의
tasks.register('buildFrontend', Exec) {
    workingDir = file(frontendDir)
    commandLine 'npm', 'run', 'build'
    ignoreExitValue false

    // PATH 환경 변수에 npm 경로 추가
    environment PATH: "${System.env.PATH};C:/Program Files/nodejs" // Node.js 설치 경로에 맞게 수정
}

// 프론트엔드 빌드 결과물 복사 작업 정의
tasks.register('copyFrontendBuild', Copy) {
    from "$frontendDir/build"
    into "$projectDir/backend/src/main/resources/static"
    dependsOn ":frontend:build" // frontend 프로젝트 빌드 task 의존성 추가
}
